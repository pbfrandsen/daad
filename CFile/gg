#ifndef CFILE_H
#define CFILE_H

#include <fstream>
#include <string>

#define BUFFERSIZE 10
#define UNDOs      1


// Idee: ios::   set Buffer size

// TODO: Old mac format not supported.
//       This requires to allow two successive calls to the internal ungetchar command.


const char __eof_flag  = 1;
const char __good_flag = 2;
const char __fail_flag = 4;
const char __bad_flag  = 8;



class CFile : private std::ifstream
{
 private:
  char      buffer[BUFFERSIZE];
  char*     buffer_end;
  char*     buffer_pos;
  
  char      __status;
  unsigned  __line;

  //  bool      __eof;
  //  bool      __openFailed;



  unsigned fill_buffer(unsigned overlap)
  {
    unsigned          good_overlap = buffer_end - buffer;
    std::streamsize   n;

    if (good_overlap < overlap)
    {
      overlap = good_overlap;
    }

    if (overlap > 0)
      std::memmove(buffer, buffer_end - overlap, overlap);

    std::ifstream::read(buffer + overlap, BUFFERSIZE - overlap);
    n = std::ifstream::gcount();

    if ( n == 0 )
    {
      __status |=  __eof_flag;
      __status &= ~__good_flag;
      __status |=  __fail_flag;    // Setting the fail flag is not always correct. Needs to be unset in routines that read more than one char. 
    }

    buffer_pos = buffer+overlap;
    buffer_end = buffer_pos + n;
  }

  char getchar_intern()
  {
    if ( buffer_pos == buffer_end )
      fill_buffer(UNDOs);
    return *buffer_pos++;
  }

  void ungetchar_intern()
  {
    if (buffer_pos != buffer)
      --buffer_pos;
    else
    {
      __status |=  __fail_flag;      // Set fail flag.
      __status &= ~__good_flag;     // Unset good flag.
    }
  }

 public:
  void ffopen(const char *name)
  {
    __status = __good_flag;

    std::ifstream::open(name);

    if ( std::ifstream::fail() )
    {
      __status |=  __fail_flag;      // Set fail flag.
      __status &= ~__good_flag;     // Unset good flag.
    }

    __line        = 1;
    buffer_end    = buffer;
    buffer_pos    = buffer;
  }

  void ffclose()
  {
    std::ifstream::close();
  }

  bool exists()  // -- depricated -- !!!!!!!!
  {
    return fail(); 
  }

  bool fail()
  {
    return (__status & __fail_flag);
  }

  unsigned line()
  {
    return __line;
  }

  bool eof()
  {
    return (__status & __eof_flag);
  }

  char status()
  {
    return __status;
  }

  void ungetchar()
  {
    if (*buffer_pos == '\n')
      --__line;
    ungetchar_intern();
  }

  char peekchar()  // fail
  {
    char c = getchar();
    ungetchar();
    return c;
  }

  char getchar()
  {
    register char c;

    c = getchar_intern();

    if (  c == '\r' && !(__status & __fail_flag) )
    {
      *(buffer_pos-1) = '\n';           // Should always be valid! Works for 1 Undo
      c = getchar_intern();
      if ( c != '\n' && !(__status & __fail_flag) )
      {
	// 	std::cerr << "Old mac file format currently not supported." << std::endl;
	ungetchar();    /* old mac format, else dos format     */
      }
      c = '\n';
    }
    if ( c == '\n')
      ++__line;
    return c;  
  }


  char getrawchar()
  {
    return getchar_intern();
  }


  void getline(std::string& str, char delim='\n')
  {
    char c = getchar();
    str="";
    while ( c != delim && !(__status & __fail_flag) )
    {
      str.push_back(c);
      c = getchar();
    }
    if ((__status & __fail_flag) && str.size() > 0)
      __status &= ~__fail_flag;
  }

  void getline(char* cstr, unsigned n, char delim='\n')
  {
    char     c = getchar();
    unsigned i = 0;

    while ( !(__status & __fail_flag ) && i < n-1 &&  c != delim)
    {
      cstr[i] = c;
      ++i;
      c = getchar(); 
    }
    if ((__status & __fail_flag) && i > 0)
      __status &= ~__fail_flag;
    cstr[i] = '\0';
  }


  char lastchar()
  {
    char c;

    if ( buffer_pos != buffer_end )
      c = *(buffer_pos-1);
    else
    {
      __status |= __fail_flag;      // Set fail flag.
      __status &= ~__good_flag;     // Unset good flag.
      return 0;
    }

    /* It could be a '\r' in mac format */
    if (c == '\r')
      c = '\n';

    return c;
  }

  char lastrawchar()
  {
    char c;

    if ( buffer_pos != buffer_end )
      c = *(buffer_pos-1);
    else
    {
      __status |= __fail_flag;      // Set fail flag.
      __status &= ~__good_flag;     // Unset good flag.
      return 0;
    }
    return c;
  }


};


#endif
